import asyncio
import logging
import json
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
OWNER_ID = 8100863185

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}

# –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTIONS = {
    "sayori": {
        "name": "üíô –°–∞–π–æ—Ä–∏",
        "price": "299‚ÇΩ/–º–µ—Å",
        "level": 1,
        "content": ["–ú–µ–º—ã", "–ú–∏–Ω–∏-—Å–ø–æ–π–ª–µ—Ä—ã", "1 —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"],
        "next_level": "natsuki"
    },
    "natsuki": {
        "name": "üíó –ù–∞—Ü—É–∫–∏", 
        "price": "599‚ÇΩ/–º–µ—Å",
        "level": 2,
        "content": ["–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ–º—ã", "–ê—Ä—Ç—ã 16+", "2 —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"],
        "next_level": "yuri"
    },
    "yuri": {
        "name": "üíú –Æ—Ä–∏",
        "price": "999‚ÇΩ/–º–µ—Å",
        "level": 3, 
        "content": ["–ê—Ä—Ç—ã 18+", "3 —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏"],
        "next_level": "monika"
    },
    "monika": {
        "name": "üíö –ú–æ–Ω–∏–∫–∞",
        "price": "1499‚ÇΩ/–º–µ—Å",
        "level": 4,
        "content": ["–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–∞–º", "–ó–æ–ª–æ—Ç–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"]
    }
}

def save_user_data():
    try:
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(users_db, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"Error saving user data: {e}")

def load_user_data():
    global users_db
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            users_db = json.load(f)
    except FileNotFoundError:
        users_db = {}
        logging.info("users.json not found, creating new database")
    except Exception as e:
        users_db = {}
        logging.error(f"Error loading user data: {e}")

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    
    if user_id not in users_db:
        users_db[user_id] = {
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'subscription_level': 0,
            'subscription_end': None,
            'agreement_accepted': False
        }
        save_user_data()
    
    if not users_db[user_id]['agreement_accepted']:
        await show_license_agreement(message)
        return
    
    await show_main_menu(message)

async def show_license_agreement(message: types.Message):
    agreement_text = """
üìú <b>–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï</b>

‚ö†Ô∏è <b>–ó–ê–ü–†–ï–©–ï–ù–û:</b>
‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º  
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö

<b>–ù–ê–†–£–®–ï–ù–ò–ï –ü–†–ê–í–ò–õ –ü–†–ò–í–û–î–ò–¢ –ö:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–º—É —Å–Ω—è—Ç–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_agreement")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_agreement")]
    ])
    
    await message.answer(agreement_text, reply_markup=keyboard)

@dp.callback_query(F.data == "accept_agreement")
async def accept_agreement(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    users_db[user_id]['agreement_accepted'] = True
    save_user_data()
    await callback.message.edit_text("‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    await show_main_menu(callback.message)

@dp.callback_query(F.data == "reject_agreement")
async def reject_agreement(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.")

async def show_main_menu(message: types.Message):
    user_id = str(message.from_user.id)
    user_data = users_db.get(user_id, {})
    
    if user_data.get('subscription_level', 0) > 0:
        sub_name = [sub['name'] for sub in SUBSCRIPTIONS.values() if sub['level'] == user_data['subscription_level']][0]
        end_date = user_data.get('subscription_end', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {sub_name}\nüìÖ –î–æ: {end_date}"
    else:
        status_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="üéÅ –ú–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç"), KeyboardButton(text="üë§ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ], resize_keyboard=True)
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        f"{status_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫")
async def show_subscriptions(message: types.Message):
    text = "üé≠ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    for key, sub in SUBSCRIPTIONS.items():
        text += f"{sub['name']} - {sub['price']}\n"
        text += f"–£—Ä–æ–≤–µ–Ω—å: {sub['level']}\n"
        text += "–í–∫–ª—é—á–∞–µ—Ç:\n"
        for item in sub['content']:
            text += f"‚Ä¢ {item}\n"
        text += "\n"
    
    text += "\nüí° –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ!"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sub['name'], callback_data=f"buy_{key}")] 
        for key, sub in SUBSCRIPTIONS.items()
    ])
    
    await message.answer(text, reply_markup=keyboard)

@dp.message(F.text == "üéÅ –ú–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
async def show_my_content(message: types.Message):
    user_id = str(message.from_user.id)
    user_level = users_db.get(user_id, {}).get('subscription_level', 0)
    
    if user_level == 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
        return
    
    content_messages = []
    
    if user_level >= 1:  # Sayori
        content_messages.append("üíô <b>–ö–æ–Ω—Ç–µ–Ω—Ç –°–∞–π–æ—Ä–∏:</b>\n‚Ä¢ –ú–µ–º—ã\n‚Ä¢ –ú–∏–Ω–∏-—Å–ø–æ–π–ª–µ—Ä—ã")
        
    if user_level >= 2:  # Natsuki  
        content_messages.append("üíó <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ù–∞—Ü—É–∫–∏:</b>\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ–º—ã\n‚Ä¢ –ê—Ä—Ç—ã 16+")
        
    if user_level >= 3:  # Yuri
        content_messages.append("üíú <b>–ö–æ–Ω—Ç–µ–Ω—Ç –Æ—Ä–∏:</b>\n‚Ä¢ –ê—Ä—Ç—ã 18+")
        
    if user_level >= 4:  # Monika
        content_messages.append("üíö <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ú–æ–Ω–∏–∫–∏:</b>\n‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–∞–º")
    
    for msg in content_messages:
        await message.answer(msg)

@dp.message(F.text == "üë§ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
async def show_my_subscription(message: types.Message):
    user_id = str(message.from_user.id)
    user_data = users_db.get(user_id, {})
    
    if user_data.get('subscription_level', 0) == 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
        return
    
    sub_name = [sub['name'] for sub in SUBSCRIPTIONS.values() if sub['level'] == user_data['subscription_level']][0]
    end_date = user_data.get('subscription_end', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    text = f"""
üìä <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>
üé≠ –£—Ä–æ–≤–µ–Ω—å: {sub_name}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}
üë§ –í–∞—à ID: {user_id}

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {', '.join([sub['name'] for sub in SUBSCRIPTIONS.values() if sub['level'] <= user_data['subscription_level']])}
    """
    
    await message.answer(text)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="admin_users")],
        [InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_add_sub")]
    ])
    
    await message.answer("üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("admin_"))
async def admin_actions(callback: types.CallbackQuery):
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    action = callback.data
    
    if action == "admin_stats":
        active_subs = sum(1 for user in users_db.values() if user.get('subscription_level', 0) > 0)
        total_users = len(users_db)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}

–ü–æ —É—Ä–æ–≤–Ω—è–º:
"""
        for level in range(1, 5):
            count = sum(1 for user in users_db.values() if user.get('subscription_level', 0) == level)
            level_name = [sub['name'] for sub in SUBSCRIPTIONS.values() if sub['level'] == level][0]
            stats_text += f"{level_name}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        await callback.message.edit_text(stats_text)
    
    elif action == "admin_users":
        users_list = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b>\n\n"
        for user_id, user_data in users_db.items():
            if user_data.get('subscription_level', 0) > 0:
                sub_name = [sub['name'] for sub in SUBSCRIPTIONS.values() if sub['level'] == user_data['subscription_level']][0]
                users_list += f"üë§ {user_data['first_name']} (ID: {user_id})\nüé≠ {sub_name}\nüìÖ –î–æ: {user_data.get('subscription_end', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        await callback.message.edit_text(users_list or "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    elif action == "admin_add_sub":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=sub['name'], callback_data=f"addsub_{key}")] 
                for key, sub in SUBSCRIPTIONS.items()
            ])
        )

@dp.callback_query(F.data.startswith("addsub_"))
async def add_subscription_menu(callback: types.CallbackQuery):
    sub_key = callback.data.replace("addsub_", "")
    sub_level = SUBSCRIPTIONS[sub_key]['level']
    
    await callback.message.edit_text(
        f"–î–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {SUBSCRIPTIONS[sub_key]['name']} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        f"<code>/addsub USER_ID DAYS</code>\n\n"
        f"–ü—Ä–∏–º–µ—Ä: <code>/addsub 123456789 30</code>"
    )

@dp.message(Command("addsub"))
async def add_subscription_command(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /addsub USER_ID DAYS")
            return
            
        user_id = str(parts[1])
        days = int(parts[2])
        
        if user_id not in users_db:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
        
        end_date = (datetime.datetime.now() + datetime.timedelta(days=days)).strftime("%d.%m.%Y")
        users_db[user_id]['subscription_level'] = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        users_db[user_id]['subscription_end'] = end_date
        save_user_data()
        
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ú–æ–Ω–∏–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ {end_date}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(int(user_id), f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ú–æ–Ω–∏–∫–∞ –¥–æ {end_date}!")
        except:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
"""
    await message.answer(help_text)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_user_data()

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
